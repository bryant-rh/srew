// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bryant-rh/srew/internal/model"
)

func newDetail(db *gorm.DB) detail {
	_detail := detail{}

	_detail.detailDo.UseDB(db)
	_detail.detailDo.UseModel(&model.Detail{})

	tableName := _detail.detailDo.TableName()
	_detail.ALL = field.NewField(tableName, "*")
	_detail.ID = field.NewInt32(tableName, "id")
	_detail.PluginID = field.NewString(tableName, "plugin_id")
	_detail.PluginName = field.NewString(tableName, "plugin_name")
	_detail.Version = field.NewString(tableName, "version")
	_detail.Homepage = field.NewString(tableName, "homepage")
	_detail.ShortDescription = field.NewString(tableName, "shortDescription")
	_detail.Description = field.NewString(tableName, "description")
	_detail.Caveats = field.NewString(tableName, "caveats")
	_detail.Platforms = field.NewString(tableName, "platforms")
	_detail.CreatedAt = field.NewTime(tableName, "created_at")
	_detail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_detail.fillFieldMap()

	return _detail
}

type detail struct {
	detailDo detailDo

	ALL              field.Field
	ID               field.Int32
	PluginID         field.String
	PluginName       field.String
	Version          field.String
	Homepage         field.String
	ShortDescription field.String
	Description      field.String
	Caveats          field.String
	Platforms        field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (d detail) Table(newTableName string) *detail {
	d.detailDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d detail) As(alias string) *detail {
	d.detailDo.DO = *(d.detailDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *detail) updateTableName(table string) *detail {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt32(table, "id")
	d.PluginID = field.NewString(table, "plugin_id")
	d.PluginName = field.NewString(table, "plugin_name")
	d.Version = field.NewString(table, "version")
	d.Homepage = field.NewString(table, "homepage")
	d.ShortDescription = field.NewString(table, "shortDescription")
	d.Description = field.NewString(table, "description")
	d.Caveats = field.NewString(table, "caveats")
	d.Platforms = field.NewString(table, "platforms")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *detail) WithContext(ctx context.Context) *detailDo { return d.detailDo.WithContext(ctx) }

func (d detail) TableName() string { return d.detailDo.TableName() }

func (d detail) Alias() string { return d.detailDo.Alias() }

func (d *detail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *detail) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["plugin_id"] = d.PluginID
	d.fieldMap["plugin_name"] = d.PluginName
	d.fieldMap["version"] = d.Version
	d.fieldMap["homepage"] = d.Homepage
	d.fieldMap["shortDescription"] = d.ShortDescription
	d.fieldMap["description"] = d.Description
	d.fieldMap["caveats"] = d.Caveats
	d.fieldMap["platforms"] = d.Platforms
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d detail) clone(db *gorm.DB) detail {
	d.detailDo.ReplaceDB(db)
	return d
}

type detailDo struct{ gen.DO }

func (d detailDo) Debug() *detailDo {
	return d.withDO(d.DO.Debug())
}

func (d detailDo) WithContext(ctx context.Context) *detailDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d detailDo) ReadDB(ctx context.Context) *detailDo {
	return d.WithContext(ctx).Clauses(dbresolver.Read)
}

func (d detailDo) WriteDB(ctx context.Context) *detailDo {
	return d.WithContext(ctx).Clauses(dbresolver.Write)
}

func (d detailDo) Clauses(conds ...clause.Expression) *detailDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d detailDo) Returning(value interface{}, columns ...string) *detailDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d detailDo) Not(conds ...gen.Condition) *detailDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d detailDo) Or(conds ...gen.Condition) *detailDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d detailDo) Select(conds ...field.Expr) *detailDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d detailDo) Where(conds ...gen.Condition) *detailDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d detailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *detailDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d detailDo) Order(conds ...field.Expr) *detailDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d detailDo) Distinct(cols ...field.Expr) *detailDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d detailDo) Omit(cols ...field.Expr) *detailDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d detailDo) Join(table schema.Tabler, on ...field.Expr) *detailDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d detailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *detailDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d detailDo) RightJoin(table schema.Tabler, on ...field.Expr) *detailDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d detailDo) Group(cols ...field.Expr) *detailDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d detailDo) Having(conds ...gen.Condition) *detailDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d detailDo) Limit(limit int) *detailDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d detailDo) Offset(offset int) *detailDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d detailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *detailDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d detailDo) Unscoped() *detailDo {
	return d.withDO(d.DO.Unscoped())
}

func (d detailDo) Create(values ...*model.Detail) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d detailDo) CreateInBatches(values []*model.Detail, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d detailDo) Save(values ...*model.Detail) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d detailDo) First() (*model.Detail, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Detail), nil
	}
}

func (d detailDo) Take() (*model.Detail, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Detail), nil
	}
}

func (d detailDo) Last() (*model.Detail, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Detail), nil
	}
}

func (d detailDo) Find() ([]*model.Detail, error) {
	result, err := d.DO.Find()
	return result.([]*model.Detail), err
}

func (d detailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Detail, err error) {
	buf := make([]*model.Detail, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d detailDo) FindInBatches(result *[]*model.Detail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d detailDo) Attrs(attrs ...field.AssignExpr) *detailDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d detailDo) Assign(attrs ...field.AssignExpr) *detailDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d detailDo) Joins(fields ...field.RelationField) *detailDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d detailDo) Preload(fields ...field.RelationField) *detailDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d detailDo) FirstOrInit() (*model.Detail, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Detail), nil
	}
}

func (d detailDo) FirstOrCreate() (*model.Detail, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Detail), nil
	}
}

func (d detailDo) FindByPage(offset int, limit int) (result []*model.Detail, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d detailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *detailDo) withDO(do gen.Dao) *detailDo {
	d.DO = *do.(*gen.DO)
	return d
}
